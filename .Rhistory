?microarray2soft
?barplot
?getwd()
?seq
?barplot
?unique
?Sysyem
?System
?system
library("DESeq2")
?DESeqDataSetFromMatrix
library("pasilla")
data("pasillaGenes")
countData <- counts(pasillaGenes)
colData <- pData(pasillaGenes)[,c("condition","type")]
head(countData)
head(colData)
?data.frame
?log
?order
?heatmap.2
library(gplots)
?heatmap.2
?DESeq
packageVersion("DESeq2")
R
microarray <- read.table("/Users//blancha/Downloads/mart_export.txt")
?read.table
microarray <- read.table("/Users//blancha/Downloads/mart_export.txt", skip=1)
head(microarray)
rnaseq <- read.table("/Users//blancha/Downloads/rnaseq.txt", skip=1)
venn
?venn
library(gplots)
?venn
venn(data=list(microarray, rnaseq))
listVenn = list(microarray_ensembl=microarray$V1, rnaseq_ensembl=rnaseq$V1)
venn(listVenn)
?setdiff
rnaseq.lec <- read.table("Users/blancha/Downloads/rnaseq_LEC.txt", skip=1)
rnaseq.lec <- read.table("/Users/blancha/Downloads/rnaseq_LEC.txt", skip=1)
rnaseq.lec <- unique(rnaseq.lec)
listVenn = list(microarray_ensembl=microarray$V1, rnaseq_ensembl_lec=rnaseq.lec$V1)
venn(listVenn)
length(rnaseq.lec)
length(rnaseq.lec$V1)
rnaseq.lec <- unique(rnaseq.lec$V1)
listVenn = list(microarray_ensembl=microarray$V1, rnaseq_ensembl_lec=rnaseq.lec)
venn(listVenn)
length(rnaseq.lec)
?unique
test <- read.table("/Users/Desktop/LEC/ensembl_gene_ids.txt")
test <- read.table("~/Desktop/LEC/ensembl_gene_ids.txt")
length(test)
length(test$V1)
length(unique(test$V1)
)
microarray <- read.table("/Users//blancha/Downloads/mart_export.txt", skip=1)
rnaseq <- read.table("/Users//blancha/Downloads/rnaseq.txt", skip=1)
listVenn = list(microarray_ensembl=microarray$V1, rnaseq_ensembl=rnaseq$V1)
venn(listVenn)
?setdiff
a <- 1:10
b <- 5:15
setdiff(a,b)
setdiff(b,a)
difference <- setdiff(microarray, rnaseq)
head(difference)
library(gplots)
?heatmap.2
?text
22020693-22020749
(4384 + 1278) * 0.10
^abline
?abline
?par
?abline
plot(1:0)
plot(1:10)
abline(x=0,y=1)
abline(0,1)
^par
?par
^par
?par
?plot
source("http://www.bioconductor.org/biocLite.R")
biocLite("GEOquery")
?getGEO
library("GEOQuery")
library("GEOquery")
?getGEO
gse.20645 <- getGEO("GSE20465")
Meta(gse.20645)
class(gse.20645)
names(gse.20645)
?show
show(gse.20465)
show(gse.20645)
experimentData(gse.20645)
eData(gse.20645)
gse.20645 <- getGEO("GSE20465", GSEMatrix=FALSE)
library("DESeq2")
library("WriteXLS")
library("gdata")
library("gplots")
library("RColorBrewer")
##################
# DESeq analysis #
##################
setwd("/Users/blancha/Desktop/scripts/deseq")
# Create output directories
dir.create("../../deseq")
# Read the annotation file
annotation <- read.csv("annotation.txt", sep="\t")
# Read the design file
sampleTable <- read.table("deseqDesign.txt", header=TRUE)
# Create a DESeqDataSet object, and perform calculattions.
dds <- DESeqDataSetFromHTSeqCount(sampleTable=sampleTable, directory="../../htseqcount", design= ~ condition)
dds <- DESeq(dds, betaPrior=FALSE)
# Calculate and save the annotated normalized counts.
normalized.counts <- as.data.frame(counts( dds, normalized=TRUE ))
normalized.counts <- merge(annotation, normalized.counts, by.x="ensembl_gene_id", by.y="row.names")
WriteXLS("normalized.counts", ExcelFileName = "../../deseq/normalized_counts.xls", row.names=FALSE, BoldHeaderRow=TRUE)
################################
# 5A.NG4.IP.5A_vs_5A.NG4.input #
################################
res <- as.data.frame(results(dds, "condition_5A.NG4.IP.5A_vs_5A.NG4.input", cooksCutoff=FALSE))
baseMean_5A.NG4.IP.5A <- rowMeans(counts(dds,normalized=TRUE)[,colData(dds)$condition == "5A-NG4-IP-5A"])
baseMean_5A.NG4.input <- rowMeans(counts(dds,normalized=TRUE)[,colData(dds)$condition == "5A-NG4-input"])
res <- data.frame(baseMean_5A.NG4.IP.5A, baseMean_5A.NG4.input, log2FoldChange=res$log2FoldChange, lfcSE=res$lfcSE, pvalue=res$pvalue, padj=res$padj)
res <- res[order(res$padj),]
res <- merge(annotation, res, by.x="ensembl_gene_id", by.y="row.names")
colnames(res) <- gsub("\\.", "-", colnames(res))
WriteXLS("res", ExcelFileName = "../../deseq/5A_NG4_IP_5A_vs_5A_NG4_input.xls", row.names=FALSE, BoldHeaderRow=TRUE)
################################
# 5A.NG4.IP.5B_vs_5A.NG4.input #
################################
res <- as.data.frame(results(dds, "condition_5A.NG4.IP.5B_vs_5A.NG4.input", cooksCutoff=FALSE))
baseMean_5A.NG4.IP.5B <- rowMeans(counts(dds,normalized=TRUE)[,colData(dds)$condition == "5A-NG4-IP-5B"])
baseMean_5A.NG4.input <- rowMeans(counts(dds,normalized=TRUE)[,colData(dds)$condition == "5A-NG4-input"])
res <- data.frame(baseMean_5A.NG4.IP.5B, baseMean_5A.NG4.input, log2FoldChange=res$log2FoldChange, lfcSE=res$lfcSE, pvalue=res$pvalue, padj=res$padj)
res <- res[order(res$padj),]
res <- merge(annotation, res, by.x="ensembl_gene_id", by.y="row.names")
colnames(res) <- gsub("\\.", "-", colnames(res))
WriteXLS("res", ExcelFileName = "../../deseq/5A_NG4_IP_5B_vs_5A_NG4_input.xls", row.names=FALSE, BoldHeaderRow=TRUE)
colData(dds)$condition <- relevel(colData(dds)$condition, "WT-input")
dds <- DESeq(dds, betaPrior=FALSE)
################################
# 5A.NG4.IP.5A_vs_WT.input #
################################
res <- as.data.frame(results(dds, "condition_5A.NG4.IP.5A_vs_WT.input", cooksCutoff=FALSE))
baseMean_5A.NG4.IP.5A <- rowMeans(counts(dds,normalized=TRUE)[,colData(dds)$condition == "5A-NG4-IP-5A"])
baseMean_WT.input <- rowMeans(counts(dds,normalized=TRUE)[,colData(dds)$condition == "WT-input"])
res <- data.frame(baseMean_5A.NG4.IP.5A, baseMean_WT.input, log2FoldChange=res$log2FoldChange, lfcSE=res$lfcSE, pvalue=res$pvalue, padj=res$padj)
res <- res[order(res$padj),]
res <- merge(annotation, res, by.x="ensembl_gene_id", by.y="row.names")
colnames(res) <- gsub("\\.", "-", colnames(res))
WriteXLS("res", ExcelFileName = "../../deseq/5A_NG4_IP_5A_vs_WT_input.xls", row.names=FALSE, BoldHeaderRow=TRUE)
################################
# 5A.NG4.IP.5B_vs_WT.input #
################################
res <- as.data.frame(results(dds, "condition_5A.NG4.IP.5B_vs_WT.input", cooksCutoff=FALSE))
baseMean_5A.NG4.IP.5B <- rowMeans(counts(dds,normalized=TRUE)[,colData(dds)$condition == "5A-NG4-IP-5B"])
baseMean_WT.input <- rowMeans(counts(dds,normalized=TRUE)[,colData(dds)$condition == "WT-input"])
res <- data.frame(baseMean_5A.NG4.IP.5B, baseMean_WT.input, log2FoldChange=res$log2FoldChange, lfcSE=res$lfcSE, pvalue=res$pvalue, padj=res$padj)
res <- res[order(res$padj),]
res <- merge(annotation, res, by.x="ensembl_gene_id", by.y="row.names")
colnames(res) <- gsub("\\.", "-", colnames(res))
WriteXLS("res", ExcelFileName = "../../deseq/5A_NG4_IP_5B_vs_WT_input.xls", row.names=FALSE, BoldHeaderRow=TRUE)
colData(dds)$condition <- relevel(colData(dds)$condition, "5Bko-input")
dds <- DESeq(dds, betaPrior=FALSE)
############################
# 5Bko.IP.5A_vs_5Bko.input #
############################
res <- as.data.frame(results(dds, "condition_5Bko.IP.5A_vs_5Bko.input", cooksCutoff=FALSE))
baseMean_5A.NG4.IP.5A <- rowMeans(counts(dds,normalized=TRUE)[,colData(dds)$condition == "5Bko-IP-5A"])
baseMean_WT.input <- rowMeans(counts(dds,normalized=TRUE)[,colData(dds)$condition == "5Bko-input"])
res <- data.frame(baseMean_5A.NG4.IP.5A, baseMean_WT.input, log2FoldChange=res$log2FoldChange, lfcSE=res$lfcSE, pvalue=res$pvalue, padj=res$padj)
res <- res[order(res$padj),]
res <- merge(annotation, res, by.x="ensembl_gene_id", by.y="row.names")
colnames(res) <- gsub("\\.", "-", colnames(res))
WriteXLS("res", ExcelFileName = "../../deseq/5Bko_IP_5A_vs_5Bko_input.xls", row.names=FALSE, BoldHeaderRow=TRUE)
# Heatmap of 30 most expressed genes most expressed genes
rownames(normalized.counts) <- paste(normalized.counts$external_gene_id, normalized.counts$ensembl_gene_id, sep=" - ")
normalized.counts <- normalized.counts[, -(1:3)] # Keep only gene expression values
select <- order(rowMeans(normalized.counts),decreasing=TRUE)[1:30]
hmcol <- colorRampPalette(brewer.pal(9, "GnBu"))(100)
dir.create("../../deseq/plots")
pdf("../../deseq/plots/heatmap_30_most_expressed_genes.pdf", width=8, height=8)
heatmap.2(data.matrix(normalized.counts[select,]), col = hmcol, Rowv = FALSE, Colv = FALSE, scale="none",dendrogram="none", trace="none", margin=c(10,15))
dev.off()
# Sample clustering
# A heatmap of this distance matrix gives us an overview over similarities and dissimilarities between samples
pdf("../../deseq/plots/sample_clustering_all_genes.pdf")
distsRL <- dist(t(normalized.counts))
mat <- as.matrix(distsRL)
rownames(mat) <- colnames(mat) <- colnames(normalized.counts)
heatmap.2(mat, trace="none", col = rev(hmcol), margin=c(13, 13))
dev.off()
setwd("~/Desktop/scripts/report")
nanuq <- read.table("nanuq.csv", header=TRUE, sep=",")
nanuq <- subset(nanuq, select=c(Name, Run, Run.Type, Library.Type, Number.of.reads, Number.of.Cycles,  X..Duplicate))
nanuq$X..Duplicate <- sprintf("%.2f", nanuq$X..Duplicate)
nanuq$X..Duplicate <- paste(nanuq$X..Duplicate, "(%)")
colnames(nanuq)[7] <- "Duplicates"
colnames(nanuq) <- gsub("\\.", " ", colnames(nanuq))
nanuq <- nanuq[order(nanuq$Name),]
write.table(nanuq, "nanuqFormatted.csv", sep=",", row.names=FALSE)
nanuq
design <- read.table("../design.txt", header=TRUE, sep="\t")
colnames(design)[1] <- ""
numberDesigns <- length(colnames(design)) -1
colnames(design) <- c("", paste("Design", 1:numberDesigns))
write.table(design, "design.csv", sep=",", row.names=FALSE)
vignette("DEXSeq")
library("DEXSeq")
?plotDispEsts( ecs )
?plotDispEsts
?write.table
a <- "b"
q()
library(gplots)
# First, set the path to the working directory. You will need to change this.
setwd("/Users/blancha/Desktop/R_workshop")
# Read tab-separated value into data frame. Set fill to TRUE to add NAs when the rows are imcomplete
data <- read.table("deseq/cyto_vs_total.txt", fill=TRUE)
# Keep only the 1st 30 genes in the file
data <- data[1:30,]
distance <- dist(data)
heatmap.2(data, trace="none")
heatmap.2(as.matrix(data), trace="none")
head(data)
data <- subset(data, select=c(Mean_cyto, Mean_total))
head(data)
distance <- dist(data)
heatmap.2(as.matrix(data), trace="none")
distance <- dist(data)# Set a logarithmic scale to better distinguish the samples
data <- log(data)
# Draw the heatmap of the first 30 genes in the file.
distance <- dist(data)
heatmap.2(as.matrix(data), trace="none")
heatmap.2(as.matrix(data), trace="none")
library(gplots)
# First, set the path to the working directory. You will need to change this.
setwd("/Users/blancha/Desktop/R_workshop")
# Read tab-separated value into data frame. Set fill to TRUE to add NAs when the rows are imcomplete
data <- read.table("deseq/cyto_vs_total.txt", fill=TRUE)
# Keep only the 1st 30 genes in the file
data <- data[1:30,]
# Keep only the counts columns
data <- subset(data, select=c(Mean_cyto, Mean_total))
# Set a logarithmic scale to better distinguish the samples
data <- log(data)
# Draw the heatmap of the first 30 genes in the file.
distance <- dist(data)
heatmap.2(as.matrix(data), trace="none", margin=c(13, 13)))
library(gplots)
# First, set the path to the working directory. You will need to change this.
setwd("/Users/blancha/Desktop/R_workshop")
# Read tab-separated value into data frame. Set fill to TRUE to add NAs when the rows are imcomplete
data <- read.table("deseq/cyto_vs_total.txt", fill=TRUE)
# Keep only the 1st 30 genes in the file
data <- data[1:30,]
# Keep only the counts columns
data <- subset(data, select=c(Mean_cyto, Mean_total))
# Set a logarithmic scale to better distinguish the samples
data <- log(data)
# Draw the heatmap of the first 30 genes in the file.
distance <- dist(data)
heatmap.2(as.matrix(data), trace="none", margin=c(13, 13))
?heatmap.2
heatmap.2(as.matrix(data), trace="none", margin=c(15, 13))
heatmap.2(as.matrix(data), trace="none", margin=c(16, 10))
?heatmap.2
heatmap.2(as.matrix(data), trace="none", margin=c(16, 10), dendrogram="row")
getwd()
list.files()
setwd("homerGraphs")
###################################################
# Generates 4 graphs, based on 4 statistics files #
# tss.stats.csv, exon.stats.csv, intron.stats.csv #
# and tss.distance.csv.                           #
# Reads statitics files from graphs folder.       #
# Stores graphs in same graphs folder.            #
#                                                 #
# Author: Alexis Blanchet-Cohen                   #
# Modified from script written by Maxime Caron    #
###################################################
##############################################
# Distribution of distance of peaks from TSS #
##############################################
distance<-paste("graphs/statistics/tss.distance.csv")
d1<-read.table(distance, header=F, sep=",", check.names=F)
d1<-subset(d1, d1[,1] > -10000 & d1[,1] < 10000)
# PDF file
pdf("graphs/pdf/distribution_peaks_distance_tss.pdf")
hist(d1[,1], breaks=seq(-10000,10000,1000), main=paste("Distribution of peak distances relative to TSS"), xlab="Distance to TSS (bp)", ylab="Number of peaks", col="lightblue")
dev.off()
#########################################################
# TSS categories statistics (location of binding sites) #
#########################################################
d1<-read.table("graphs/statistics/tss.stats.csv", header=T, sep=",", check.names=F)
slices <- c(d1[,1] + d1[,2], d1[,3], d1[,4], d1[,5], d1[,6], d1[,7])
lbls <- c("gene", names(d1[3:length(d1)]))
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, "(",pct, sep="") # add percents to labels
lbls <- paste(lbls,"%)",sep="") # add % to labels
# PDF file
pdf("graphs/pdf/location_binding_sites.pdf")
pie(slices,labels=lbls, main=paste("Location analysis of binding sites"))
dev.off()
###################################################
# Disitribution of peaks within introns and exons #
###################################################
exons<-paste("graphs/statistics/exon.stats.csv")
if(file.info(exons)$size == 0) {
d1=data.frame(c(0))
} else {
d1<-read.table(exons, header=F, sep=",", check.names=F)
}
introns<- paste("graphs/statistics/intron.stats.csv")
if(file.info(introns)$size == 0) {
d1=data.frame(c(0))
} else {
d2<-read.table(introns, header=F, sep=",", check.names=F)
}
# PDF files
pdf("graphs/pdf/distribution_peaks_exons.pdf")
hist(d1[,1], breaks=length(levels(as.factor(d1[,1]))), xlim=c(0,20), main=paste("Distribution of peaks found within exons"), xlab="Exon", ylab="Number of peaks", col="lightblue")
dev.off()
pdf("graphs/pdf/distribution_peaks_introns.pdf")
hist(d2[,1], breaks=length(levels(as.factor(d2[,1]))), xlim=c(0,20), main=paste("Distribution of peaks found within introns"), xlab="Intron", ylab="Number of peaks", col="lightblue")
dev.off()
###################################################
# Generates 4 graphs, based on 4 statistics files #
# tss.stats.csv, exon.stats.csv, intron.stats.csv #
# and tss.distance.csv.                           #
# Reads statitics files from graphs folder.       #
# Stores graphs in same graphs folder.            #
#                                                 #
# Author: Alexis Blanchet-Cohen                   #
# Modified from script written by Maxime Caron    #
###################################################
##############################################
# Distribution of distance of peaks from TSS #
##############################################
distance<-paste("statistics/tss.distance.csv")
d1<-read.table(distance, header=F, sep=",", check.names=F)
d1<-subset(d1, d1[,1] > -10000 & d1[,1] < 10000)
# PDF file
pdf("pdf/distribution_peaks_distance_tss.pdf")
hist(d1[,1], breaks=seq(-10000,10000,1000), main=paste("Distribution of peak distances relative to TSS"), xlab="Distance to TSS (bp)", ylab="Number of peaks", col="lightblue")
dev.off()
#########################################################
# TSS categories statistics (location of binding sites) #
#########################################################
d1<-read.table("statistics/tss.stats.csv", header=T, sep=",", check.names=F)
slices <- c(d1[,1] + d1[,2], d1[,3], d1[,4], d1[,5], d1[,6], d1[,7])
lbls <- c("gene", names(d1[3:length(d1)]))
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, "(",pct, sep="") # add percents to labels
lbls <- paste(lbls,"%)",sep="") # add % to labels
# PDF file
pdf("pdf/location_binding_sites.pdf")
pie(slices,labels=lbls, main=paste("Location analysis of binding sites"))
dev.off()
###################################################
# Disitribution of peaks within introns and exons #
###################################################
exons<-paste("statistics/exon.stats.csv")
if(file.info(exons)$size == 0) {
d1=data.frame(c(0))
} else {
d1<-read.table(exons, header=F, sep=",", check.names=F)
}
introns<- paste("statistics/intron.stats.csv")
if(file.info(introns)$size == 0) {
d1=data.frame(c(0))
} else {
d2<-read.table(introns, header=F, sep=",", check.names=F)
}
# PDF files
pdf("pdf/distribution_peaks_exons.pdf")
hist(d1[,1], breaks=length(levels(as.factor(d1[,1]))), xlim=c(0,20), main=paste("Distribution of peaks found within exons"), xlab="Exon", ylab="Number of peaks", col="lightblue")
dev.off()
pdf("pdf/distribution_peaks_introns.pdf")
hist(d2[,1], breaks=length(levels(as.factor(d2[,1]))), xlim=c(0,20), main=paste("Distribution of peaks found within introns"), xlab="Intron", ylab="Number of peaks", col="lightblue")
dev.off()
###################################################
# Generates 4 graphs, based on 4 statistics files #
# tss.stats.csv, exon.stats.csv, intron.stats.csv #
# and tss.distance.csv.                           #
# Reads statitics files from graphs folder.       #
# Stores graphs in same graphs folder.            #
#                                                 #
# Author: Alexis Blanchet-Cohen                   #
# Modified from script written by Maxime Caron    #
###################################################
# Create output directory
dir.create("pdf")
##############################################
# Distribution of distance of peaks from TSS #
##############################################
distance<-paste("statistics/tss.distance.csv")
d1<-read.table(distance, header=F, sep=",", check.names=F)
d1<-subset(d1, d1[,1] > -10000 & d1[,1] < 10000)
# PDF file
pdf("pdf/distribution_peaks_distance_tss.pdf")
hist(d1[,1], breaks=seq(-10000,10000,1000), main=paste("Distribution of peak distances relative to TSS"), xlab="Distance to TSS (bp)", ylab="Number of peaks", col="lightblue")
dev.off()
#########################################################
# TSS categories statistics (location of binding sites) #
#########################################################
d1<-read.table("statistics/tss.stats.csv", header=T, sep=",", check.names=F)
slices <- c(d1[,1] + d1[,2], d1[,3], d1[,4], d1[,5], d1[,6], d1[,7])
lbls <- c("gene", names(d1[3:length(d1)]))
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, "(",pct, sep="") # add percents to labels
lbls <- paste(lbls,"%)",sep="") # add % to labels
# PDF file
pdf("pdf/location_binding_sites.pdf")
pie(slices,labels=lbls, main=paste("Location analysis of binding sites"))
dev.off()
###################################################
# Disitribution of peaks within introns and exons #
###################################################
exons<-paste("statistics/exon.stats.csv")
if(file.info(exons)$size == 0) {
d1=data.frame(c(0))
} else {
d1<-read.table(exons, header=F, sep=",", check.names=F)
}
introns<- paste("statistics/intron.stats.csv")
if(file.info(introns)$size == 0) {
d1=data.frame(c(0))
} else {
d2<-read.table(introns, header=F, sep=",", check.names=F)
}
# PDF files
pdf("pdf/distribution_peaks_exons.pdf")
hist(d1[,1], breaks=length(levels(as.factor(d1[,1]))), xlim=c(0,20), main=paste("Distribution of peaks found within exons"), xlab="Exon", ylab="Number of peaks", col="lightblue")
dev.off()
pdf("pdf/distribution_peaks_introns.pdf")
hist(d2[,1], breaks=length(levels(as.factor(d2[,1]))), xlim=c(0,20), main=paste("Distribution of peaks found within introns"), xlab="Intron", ylab="Number of peaks", col="lightblue")
dev.off()
# Set path to R working directory. You will need to change this.
setwd("/Users/blancha/Desktop/R_workshop")
# Read tab-separated value into data frame
data <- read.table("deseq/normalized_counts.txt")
# Calculate distance between samples.
distance <- dist(t(data))
# Compute clustering
cluster <- hclust(distance)
# Plot clustering
plot(cluster)
library(gplots)
# First, set the path to the working directory. You will need to change this.
setwd("/Users/blancha/Desktop/R_workshop")
# Read tab-separated value into data frame. Set fill to TRUE to add NAs when the rows are imcomplete
data <- read.table("deseq/cyto_vs_total.txt", fill=TRUE)
# Keep only the 1st 30 genes in the file
data <- data[1:30,]
# Keep only the counts columns
data <- subset(data, select=c(Mean_cyto, Mean_total))
# Set a logarithmic scale to better distinguish the samples
data <- log(data)
# Draw the heatmap of the first 30 genes in the file.
distance <- dist(data)
heatmap.2(as.matrix(data), trace="none", margin=c(16, 10), dendrogram="row")
pdf()
heatmap.2(as.matrix(data), trace="none", margin=c(16, 10), dendrogram="row")
dev.off()
getwd()
source("http://bioconductor.org/biocLite.R")
biocLite("illuminaMousev2.db")
biocLite("illuminaMousev1.db")
library("illuminaMousev2.db")
x <- illuminaMousev2ENSEMBL
x
mapped_genes <- mappedkeys(x)
head(mapped_genes)
if(length(xx) > 0) {
# Get the Ensembl gene IDs for the first five genes
xx[1:5]
# Get the first one
xx[[1]]
}
xx <- as.list(x[mapped_genes])
if(length(xx) > 0) {
# Get the Ensembl gene IDs for the first five genes
xx[1:5]
# Get the first one
xx[[1]]
}
if(length(xx) > 0) {
# Get the Ensembl gene IDs for the first five genes
xx[1:5]
# Get the first one
#xx[[1]]
}
x <- illuminaMousev2ACCNUM
# Get the probe identifiers that are mapped to an ACCNUM
mapped_probes <- mappedkeys(x)
# Convert to a list
xx <- as.list(x[mapped_probes])
if(length(xx) > 0) {
# Get the ACCNUM for the first five probes
xx[1:5]
# Get the first one
xx[[1]]
}
